{"version":3,"sources":["App.tsx","Components/Button/Button.tsx","index.tsx"],"names":["SortType","Button","children","props","type","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","visibleGoods","goods","state","sort","goodA","goodB","ALPABET","localeCompare","LENGTH","length","reverse","getSortedGoods","shouldRenderReset","className","classNames","onClick","map","good","uuidv4","ReactDOM","render","document","getElementById"],"mappings":"6KAoBKA,E,gHCdQC,EAA0B,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAaC,EAAY,iBACjE,OACE,gDACEC,KAAK,UACDD,GAFN,aAIGD,MDLMG,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGL,O,eAAAA,I,qBAAAA,I,oBAAAA,M,KAiCE,IAAMM,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASP,EAASU,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAOMC,EAhCD,SACLC,EACAC,GAEA,IAAQJ,EAAyBI,EAAzBJ,SAAUH,EAAeO,EAAfP,WACZK,EAAe,YAAIC,GAAOE,MAAK,SAACC,EAAOC,GAC3C,OAAQP,GACN,KAAKX,EAASmB,QACZ,OAAOF,EAAMG,cAAcF,GAE7B,KAAKlB,EAASqB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAE9B,QACE,OAAO,MAIb,OAAOd,EACHK,EAAaU,UACbV,EAYiBW,CAAenB,EAClC,CAAEM,WAAUH,eAERiB,EAAoBjB,GAAcG,IAAaX,EAASU,KAE9D,OACE,sBAAKgB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,CACEA,UAAWC,IACT,SACA,UACA,CAAE,WAAYhB,IAAaX,EAASmB,UAEtCS,QAAS,kBAAMhB,EAAYZ,EAASmB,UANtC,iCAWA,cAAC,EAAD,CACEO,UAAWC,IACT,SACA,aACA,CAAE,WAAYhB,IAAaX,EAASqB,SAEtCO,QAAS,kBAAMhB,EAAYZ,EAASqB,SANtC,4BAWA,cAAC,EAAD,CACEK,UAAWC,IACT,SACA,aACA,CAAE,YAAanB,IAEjBoB,QAAS,kBAAMnB,GAAeD,IANhC,qBAWCiB,GACC,cAAC,EAAD,CACEC,UAAU,4BACVE,QAjDS,WACjBnB,GAAc,GACdG,EAAYZ,EAASU,OA6Cf,sBASJ,6BACE,6BACGG,EAAagB,KAAI,SAAAC,GAAI,OACpB,oBACE,UAAQ,OADV,SAIGA,GAFIC,0BEnHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5d237725.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Button } from './Components/Button';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPABET,\n  LENGTH,\n}\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport function getSortedGoods(\n  goods: string[],\n  state: State,\n) {\n  const { sortType, isReversed } = state;\n  const visibleGoods = [...goods].sort((goodA, goodB) => {\n    switch (sortType) {\n      case SortType.ALPABET:\n        return goodA.localeCompare(goodB);\n\n      case SortType.LENGTH:\n        return goodA.length - goodB.length;\n\n      default:\n        return 0;\n    }\n  });\n\n  return isReversed\n    ? visibleGoods.reverse()\n    : visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const resetOrder = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const visibleGoods = getSortedGoods(goodsFromServer,\n    { sortType, isReversed });\n\n  const shouldRenderReset = isReversed || sortType !== SortType.NONE;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <Button\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPABET },\n          )}\n          onClick={() => setSortType(SortType.ALPABET)}\n        >\n          Sort alphabetically\n        </Button>\n\n        <Button\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </Button>\n\n        <Button\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </Button>\n\n        {shouldRenderReset && (\n          <Button\n            className=\"button is-danger is-light\"\n            onClick={resetOrder}\n          >\n            Reset\n          </Button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {visibleGoods.map(good => (\n            <li\n              data-cy=\"Good\"\n              key={uuidv4()}\n            >\n              {good}\n            </li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import React from 'react';\n\ntype Props = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  children: React.ReactNode;\n};\n\nexport const Button: React.FC<Props> = ({ children, ...props }) => {\n  return (\n    <button\n      type=\"button\"\n      {...props}\n    >\n      {children}\n    </button>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}